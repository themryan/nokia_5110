#ifndef __NOKIA_5110_H__
#define __NOKIA_5110_H__

/* Pin definitions:
Most of these pins can be moved to any digital or analog pin.
DN(MOSI)and SCLK should be left where they are (SPI pins). The
LED (backlight) pin should remain on a PWM-capable pin. */
//const int scePin = 7;    // SCE - Chip select, pin 3 on LCD.
//const int rstPin = 6;    // RST - Reset, pin 4 on LCD.
//const int dcPin = 5;     // DC - Data/Command, pin 5 on LCD.
//const int sdinPin = 11;  // DN(MOSI) - Serial data, pin 6 on LCD.
//const int sclkPin = 13;  // SCLK - Serial clock, pin 7 on LCD.
//const int blPin = 9;     // LED - Backlight LED, pin 8 on LCD.

/* PCD8544-specific defines: */
#define LCD_COMMAND 0
#define LCD_DATA 1

/* 84x48 LCD Defines: */
#define LCD_WIDTH 84  // Note: x-coordinates go wide
#define LCD_HEIGHT 48 // Note: y-coordinates go high
#define WHITE 0       // For drawing pixels. A 0 draws white.
#define BLACK 1       // A 1 draws black.

/***** LCD Commands *****/
/* H = 0 or 1 */
#define LCD_COMMAND_NOP                 0x00
#define LCD_COMMAND_FUNCT_SET           0x20 // Power down control; entry mode; ext instr control
/* H = 1 */
#define LCD_COMMAND_DISP_CTRL           0x08 // Sets display configuration
#define LCD_COMMAND_SET_Y               0x40 // Sets Y-Address of RAM 0<=Y<=5
#define LCD_COMMAND_SET_X               0x80 // Sets X-Address of RAM 0<=X<=83
/* H = 1 */
#define LCD_COMMAND_TEMP_CTRL           0x04 // Temperature Control
#define LCD_COMMAND_BIAS_SYS            0x10 // Set Bias System
#define LCD_COMMAND_Vop                 0x80 // Set Vop

/***** LCD COMMAND OPTIONS *****/

/* LCD_COMMAND_FUNCT_SET */
#define LCD_COMMAND_FUNCT_PWR_DOWN      0x04
#define LCD_COMMAND_FUNCT_VERT_ADDR     0x02
#define LCD_COMMAND_FUNCT_EXT_H         0x01

/* LCD_COMMAND_DISP_CTRL */
#define LCD_COMMAND_DISP_BLANK          0x00
#define LCD_COMMAND_DISP_NORM           0x04
#define LCD_COMMAND_DISP_ALL_ON         0x01
#define LCD_COMMAND_DISP_INV            0x05

/* LCD_COMMAND_TEMP_CTRL */
#define LCD_COMMAND_TEMP_COEFF_0        0x00
#define LCD_COMMAND_TEMP_COEFF_1        0x01
#define LCD_COMMAND_TEMP_COEFF_2        0x02
#define LCD_COMMAND_TEMP_COEFF_3        0x03

/* Font table:
This table contains the hex values that represent pixels for a
font that is 5 pixels wide and 8 pixels high. Each byte in a row
represents one, 8-pixel, vertical column of a character. 5 bytes
per character. */
static const uint8_t ASCII[][5] = {
    // First 32 characters (0x00-0x19) are ignored. These are
    // non-displayable, control characters.
    {0x00, 0x00, 0x00, 0x00, 0x00} // 0x20
    ,
    {0x00, 0x00, 0x5f, 0x00, 0x00} // 0x21 !
    ,
    {0x00, 0x07, 0x00, 0x07, 0x00} // 0x22 "
    ,
    {0x14, 0x7f, 0x14, 0x7f, 0x14} // 0x23 #
    ,
    {0x24, 0x2a, 0x7f, 0x2a, 0x12} // 0x24 $
    ,
    {0x23, 0x13, 0x08, 0x64, 0x62} // 0x25 %
    ,
    {0x36, 0x49, 0x55, 0x22, 0x50} // 0x26 &
    ,
    {0x00, 0x05, 0x03, 0x00, 0x00} // 0x27 '
    ,
    {0x00, 0x1c, 0x22, 0x41, 0x00} // 0x28 (
    ,
    {0x00, 0x41, 0x22, 0x1c, 0x00} // 0x29 )
    ,
    {0x14, 0x08, 0x3e, 0x08, 0x14} // 0x2a *
    ,
    {0x08, 0x08, 0x3e, 0x08, 0x08} // 0x2b +
    ,
    {0x00, 0x50, 0x30, 0x00, 0x00} // 0x2c ,
    ,
    {0x08, 0x08, 0x08, 0x08, 0x08} // 0x2d -
    ,
    {0x00, 0x60, 0x60, 0x00, 0x00} // 0x2e .
    ,
    {0x20, 0x10, 0x08, 0x04, 0x02} // 0x2f /
    ,
    {0x3e, 0x51, 0x49, 0x45, 0x3e} // 0x30 0
    ,
    {0x00, 0x42, 0x7f, 0x40, 0x00} // 0x31 1
    ,
    {0x42, 0x61, 0x51, 0x49, 0x46} // 0x32 2
    ,
    {0x21, 0x41, 0x45, 0x4b, 0x31} // 0x33 3
    ,
    {0x18, 0x14, 0x12, 0x7f, 0x10} // 0x34 4
    ,
    {0x27, 0x45, 0x45, 0x45, 0x39} // 0x35 5
    ,
    {0x3c, 0x4a, 0x49, 0x49, 0x30} // 0x36 6
    ,
    {0x01, 0x71, 0x09, 0x05, 0x03} // 0x37 7
    ,
    {0x36, 0x49, 0x49, 0x49, 0x36} // 0x38 8
    ,
    {0x06, 0x49, 0x49, 0x29, 0x1e} // 0x39 9
    ,
    {0x00, 0x36, 0x36, 0x00, 0x00} // 0x3a :
    ,
    {0x00, 0x56, 0x36, 0x00, 0x00} // 0x3b ;
    ,
    {0x08, 0x14, 0x22, 0x41, 0x00} // 0x3c <
    ,
    {0x14, 0x14, 0x14, 0x14, 0x14} // 0x3d =
    ,
    {0x00, 0x41, 0x22, 0x14, 0x08} // 0x3e >
    ,
    {0x02, 0x01, 0x51, 0x09, 0x06} // 0x3f ?
    ,
    {0x32, 0x49, 0x79, 0x41, 0x3e} // 0x40 @
    ,
    {0x7e, 0x11, 0x11, 0x11, 0x7e} // 0x41 A
    ,
    {0x7f, 0x49, 0x49, 0x49, 0x36} // 0x42 B
    ,
    {0x3e, 0x41, 0x41, 0x41, 0x22} // 0x43 C
    ,
    {0x7f, 0x41, 0x41, 0x22, 0x1c} // 0x44 D
    ,
    {0x7f, 0x49, 0x49, 0x49, 0x41} // 0x45 E
    ,
    {0x7f, 0x09, 0x09, 0x09, 0x01} // 0x46 F
    ,
    {0x3e, 0x41, 0x49, 0x49, 0x7a} // 0x47 G
    ,
    {0x7f, 0x08, 0x08, 0x08, 0x7f} // 0x48 H
    ,
    {0x00, 0x41, 0x7f, 0x41, 0x00} // 0x49 I
    ,
    {0x20, 0x40, 0x41, 0x3f, 0x01} // 0x4a J
    ,
    {0x7f, 0x08, 0x14, 0x22, 0x41} // 0x4b K
    ,
    {0x7f, 0x40, 0x40, 0x40, 0x40} // 0x4c L
    ,
    {0x7f, 0x02, 0x0c, 0x02, 0x7f} // 0x4d M
    ,
    {0x7f, 0x04, 0x08, 0x10, 0x7f} // 0x4e N
    ,
    {0x3e, 0x41, 0x41, 0x41, 0x3e} // 0x4f O
    ,
    {0x7f, 0x09, 0x09, 0x09, 0x06} // 0x50 P
    ,
    {0x3e, 0x41, 0x51, 0x21, 0x5e} // 0x51 Q
    ,
    {0x7f, 0x09, 0x19, 0x29, 0x46} // 0x52 R
    ,
    {0x46, 0x49, 0x49, 0x49, 0x31} // 0x53 S
    ,
    {0x01, 0x01, 0x7f, 0x01, 0x01} // 0x54 T
    ,
    {0x3f, 0x40, 0x40, 0x40, 0x3f} // 0x55 U
    ,
    {0x1f, 0x20, 0x40, 0x20, 0x1f} // 0x56 V
    ,
    {0x3f, 0x40, 0x38, 0x40, 0x3f} // 0x57 W
    ,
    {0x63, 0x14, 0x08, 0x14, 0x63} // 0x58 X
    ,
    {0x07, 0x08, 0x70, 0x08, 0x07} // 0x59 Y
    ,
    {0x61, 0x51, 0x49, 0x45, 0x43} // 0x5a Z
    ,
    {0x00, 0x7f, 0x41, 0x41, 0x00} // 0x5b [
    ,
    {0x02, 0x04, 0x08, 0x10, 0x20} // 0x5c \ (keep this to escape the backslash)
    ,
    {0x00, 0x41, 0x41, 0x7f, 0x00} // 0x5d ]
    ,
    {0x04, 0x02, 0x01, 0x02, 0x04} // 0x5e ^
    ,
    {0x40, 0x40, 0x40, 0x40, 0x40} // 0x5f _
    ,
    {0x00, 0x01, 0x02, 0x04, 0x00} // 0x60 `
    ,
    {0x20, 0x54, 0x54, 0x54, 0x78} // 0x61 a
    ,
    {0x7f, 0x48, 0x44, 0x44, 0x38} // 0x62 b
    ,
    {0x38, 0x44, 0x44, 0x44, 0x20} // 0x63 c
    ,
    {0x38, 0x44, 0x44, 0x48, 0x7f} // 0x64 d
    ,
    {0x38, 0x54, 0x54, 0x54, 0x18} // 0x65 e
    ,
    {0x08, 0x7e, 0x09, 0x01, 0x02} // 0x66 f
    ,
    {0x0c, 0x52, 0x52, 0x52, 0x3e} // 0x67 g
    ,
    {0x7f, 0x08, 0x04, 0x04, 0x78} // 0x68 h
    ,
    {0x00, 0x44, 0x7d, 0x40, 0x00} // 0x69 i
    ,
    {0x20, 0x40, 0x44, 0x3d, 0x00} // 0x6a j
    ,
    {0x7f, 0x10, 0x28, 0x44, 0x00} // 0x6b k
    ,
    {0x00, 0x41, 0x7f, 0x40, 0x00} // 0x6c l
    ,
    {0x7c, 0x04, 0x18, 0x04, 0x78} // 0x6d m
    ,
    {0x7c, 0x08, 0x04, 0x04, 0x78} // 0x6e n
    ,
    {0x38, 0x44, 0x44, 0x44, 0x38} // 0x6f o
    ,
    {0x7c, 0x14, 0x14, 0x14, 0x08} // 0x70 p
    ,
    {0x08, 0x14, 0x14, 0x18, 0x7c} // 0x71 q
    ,
    {0x7c, 0x08, 0x04, 0x04, 0x08} // 0x72 r
    ,
    {0x48, 0x54, 0x54, 0x54, 0x20} // 0x73 s
    ,
    {0x04, 0x3f, 0x44, 0x40, 0x20} // 0x74 t
    ,
    {0x3c, 0x40, 0x40, 0x20, 0x7c} // 0x75 u
    ,
    {0x1c, 0x20, 0x40, 0x20, 0x1c} // 0x76 v
    ,
    {0x3c, 0x40, 0x30, 0x40, 0x3c} // 0x77 w
    ,
    {0x44, 0x28, 0x10, 0x28, 0x44} // 0x78 x
    ,
    {0x0c, 0x50, 0x50, 0x50, 0x3c} // 0x79 y
    ,
    {0x44, 0x64, 0x54, 0x4c, 0x44} // 0x7a z
    ,
    {0x00, 0x08, 0x36, 0x41, 0x00} // 0x7b {
    ,
    {0x00, 0x00, 0x7f, 0x00, 0x00} // 0x7c |
    ,
    {0x00, 0x41, 0x36, 0x08, 0x00} // 0x7d }
    ,
    {0x10, 0x08, 0x08, 0x10, 0x08} // 0x7e ~
    ,
    {0x78, 0x46, 0x41, 0x46, 0x78} // 0x7f DEL
};

/* The displayMap variable stores a buffer representation of the
pixels on our display. There are 504 total bits in this array,
same as how many pixels there are on a 84 x 48 display.

Each byte in this array covers a 8-pixel vertical block on the
display. Each successive byte covers the next 8-pixel column over
until you reach the right-edge of the display and step down 8 rows.

To update the display, we first have to write to this array, then
call the updateDisplay() function, which sends this whole array
to the PCD8544.

Because the PCD8544 won't let us write individual pixels at a
time, this is how we can make targeted changes to the display. */
uint8_t displayMap[LCD_WIDTH * LCD_HEIGHT / 8] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,0)->(11,7) ~ These 12 bytes cover an 8x12 block in the left corner of the display
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,0)->(23,7)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, // (24,0)->(35,7)
    0xF0, 0xF8, 0xFC, 0xFC, 0xFE, 0xFE, 0xFE, 0xFE, 0x1E, 0x0E, 0x02, 0x00, // (36,0)->(47,7)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (48,0)->(59,7)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,0)->(71,7)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,0)->(83,7)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,8)->(11,15)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,8)->(23,15)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // (24,8)->(35,15)
    0x0F, 0x1F, 0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xF8, // (36,8)->(47,15)
    0xF8, 0xF0, 0xF8, 0xFE, 0xFE, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, // (48,8)->(59,15)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,8)->(71,15)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,8)->(83,15)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,16)->(11,23)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,16)->(23,23)
    0x00, 0x00, 0xF8, 0xFC, 0xFE, 0xFE, 0xFF, 0xFF, 0xF3, 0xE0, 0xE0, 0xC0, // (24,16)->(35,23)
    0xC0, 0xC0, 0xE0, 0xE0, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // (36,16)->(47,23)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0x00, 0x00, 0x00, // (48,16)->(59,23)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,16)->(71,23)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,16)->(83,23)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,24)->(11,31)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,24)->(23,31)
    0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // (24,24)->(35,31)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // (36,24)->(47,31)
    0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, // (48,24)->(59,31)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,24)->(71,31)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,24)->(83,31)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,32)->(11,39)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,32)->(23,39)
    0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x1F, // (24,32)->(35,39)
    0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, // (36,32)->(47,39)
    0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (48,32)->(59,39)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,32)->(71,39)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,32)->(83,39)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (0,40)->(11,47)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (12,40)->(23,47)
    0x00, 0x00, 0x3F, 0x1F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, // (24,40)->(35,47)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (36,40)->(47,47)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (48,40)->(59,47)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (60,40)->(71,47)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // (72,40)->(83,47) !!! The bottom right pixel!
};

#endif // __NOKIA_5110_H__
